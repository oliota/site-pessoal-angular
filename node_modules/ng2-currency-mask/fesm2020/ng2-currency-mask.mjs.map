{"version":3,"file":"ng2-currency-mask.mjs","sources":["../../../projects/ng2-currency-mask/src/lib/currency-mask.config.ts","../../../projects/ng2-currency-mask/src/lib/input.manager.ts","../../../projects/ng2-currency-mask/src/lib/input.service.ts","../../../projects/ng2-currency-mask/src/lib/input.handler.ts","../../../projects/ng2-currency-mask/src/lib/currency-mask.directive.ts","../../../projects/ng2-currency-mask/src/lib/currency-mask.module.ts","../../../projects/ng2-currency-mask/src/public-api.ts","../../../projects/ng2-currency-mask/src/ng2-currency-mask.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\n\nexport interface CurrencyMaskConfig {\n    align: string;\n    allowNegative: boolean;\n    decimal: string;\n    precision: number;\n    prefix: string;\n    suffix: string;\n    thousands: string;\n}\n\nexport let CURRENCY_MASK_CONFIG = new InjectionToken<CurrencyMaskConfig>(\"currency.mask.config\");\n","export class InputManager {\n    private _storedRawValue: string;\n\n    constructor(private htmlInputElement: any) {}\n\n    setCursorAt(position: number): void {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        } else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n\n    updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n\n    get canInputMoreNumbers(): boolean {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected =\n            selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n        let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n\n    get inputSelection(): any {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        } else {\n            let range = document.getSelection().anchorNode;\n\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                } else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    } else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n        };\n    }\n\n    get rawValue(): string {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n\n    set rawValue(value: string) {\n        this._storedRawValue = value;\n\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n\n    get storedRawValue(): string {\n        return this._storedRawValue;\n    }\n}\n","import { InputManager } from \"./input.manager\";\n\nexport class InputService {\n    private inputManager: InputManager;\n\n    constructor(private htmlInputElement: any, private options: any) {\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n\n    addNumber(keyCode: number): void {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n\n    applyMask(isNumber: boolean, rawValue: string): string {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n        if (!onlyNumbers) {\n            return \"\";\n        }\n\n        let integerPart = onlyNumbers\n            .slice(0, onlyNumbers.length - precision)\n            .replace(/^0*/g, \"\")\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n\n    clearMask(rawValue: string): number | null {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n\n        return parseFloat(value);\n    }\n\n    changeToNegative(): void {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n\n    changeToPositive(): void {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n\n    fixCursorPosition(forceToEndPosition?: boolean): void {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n\n    getRawValueWithoutSuffixEndPosition(): number {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n\n    getRawValueWithoutPrefixStartPosition(): number {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n\n    removeNumber(keyCode: number): void {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n\n            //delete key and the target digit is the decimal or thousands divider\n            if (\n                (keyCode == 46 || keyCode == 63272) &&\n                (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)\n            ) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n\n            //backspace key and the target digit is the decimal or thousands divider\n            if (\n                keyCode == 8 &&\n                (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)\n            ) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n\n    updateFieldValue(selectionStart?: number): void {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n\n    updateOptions(options: any): void {\n        let value: number = this.value;\n        this.options = options;\n        this.value = value;\n    }\n\n    get canInputMoreNumbers(): boolean {\n        return this.inputManager.canInputMoreNumbers;\n    }\n\n    get inputSelection(): any {\n        return this.inputManager.inputSelection;\n    }\n\n    get rawValue(): string {\n        return this.inputManager.rawValue;\n    }\n\n    set rawValue(value: string) {\n        this.inputManager.rawValue = value;\n    }\n\n    get storedRawValue(): string {\n        return this.inputManager.storedRawValue;\n    }\n\n    get value(): number | null {\n        return this.clearMask(this.rawValue);\n    }\n\n    set value(value: number) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n","import { InputService } from \"./input.service\";\n\nexport class InputHandler {\n    private inputService: InputService;\n    private onModelChange: Function;\n    private onModelTouched: Function;\n    private htmlInputElement: HTMLInputElement;\n\n    constructor(htmlInputElement: HTMLInputElement, options: any) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n\n    handleClick(event: any, chromeAndroid: boolean): void {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n\n    handleCut(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n\n    handleInput(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            } else {\n                this.setValue(null);\n            }\n        }\n\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeydown(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n\n    handleKeypress(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        let keyCode = event.which || event.charCode || event.keyCode;\n\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n\n    handleKeyup(event: any): void {\n        this.inputService.fixCursorPosition();\n    }\n\n    handlePaste(event: any): void {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n\n    updateOptions(options: any): void {\n        this.inputService.updateOptions(options);\n    }\n\n    getOnModelChange(): Function {\n        return this.onModelChange;\n    }\n\n    setOnModelChange(callbackFunction: Function): void {\n        this.onModelChange = callbackFunction;\n    }\n\n    getOnModelTouched(): Function {\n        return this.onModelTouched;\n    }\n\n    setOnModelTouched(callbackFunction: Function) {\n        this.onModelTouched = callbackFunction;\n    }\n\n    setValue(value: number): void {\n        this.inputService.value = value;\n    }\n\n    private getNewKeyCode(oldString: string, newString: string): number {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n\n        return null;\n    }\n\n    private isArrowEndHomeKeyInFirefox(event: any) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n\n    private setCursorPosition(event: any): void {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n\n        // For some reason, in Android, the event got override before the timeout and change the target.\n        const inputElement = event.target;\n\n        setTimeout(function () {\n            inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n","import {\n    AfterViewInit,\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    Inject,\n    Input,\n    KeyValueDiffer,\n    KeyValueDiffers,\n    OnInit,\n    Optional,\n} from \"@angular/core\";\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from \"@angular/forms\";\nimport { CurrencyMaskConfig, CURRENCY_MASK_CONFIG } from \"./currency-mask.config\";\nimport { InputHandler } from \"./input.handler\";\n\nexport const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\n\n@Directive({\n    selector: \"[currencyMask]\",\n    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }],\n})\nexport class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit, Validator {\n    @Input() max: number;\n    @Input() min: number;\n    @Input() options: any = {};\n\n    inputHandler: InputHandler;\n    keyValueDiffer: KeyValueDiffer<any, any>;\n\n    optionsTemplate = {\n        align: \"right\",\n        allowNegative: true,\n        decimal: \".\",\n        precision: 2,\n        prefix: \"$ \",\n        suffix: \"\",\n        thousands: \",\",\n    };\n\n    constructor(\n        @Optional() @Inject(CURRENCY_MASK_CONFIG) private currencyMaskConfig: CurrencyMaskConfig,\n        private elementRef: ElementRef,\n        private keyValueDiffers: KeyValueDiffers\n    ) {\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions((<any>Object).assign({}, this.optionsTemplate, this.options));\n        }\n    }\n\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, (<any>Object).assign({}, this.optionsTemplate, this.options));\n    }\n\n    @HostListener(\"blur\", [\"$event\"])\n    handleBlur(event: any) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    handleClick(event: any) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n\n    @HostListener(\"cut\", [\"$event\"])\n    handleCut(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    handleInput(event: any) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n\n    @HostListener(\"keydown\", [\"$event\"])\n    handleKeydown(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n\n    @HostListener(\"keypress\", [\"$event\"])\n    handleKeypress(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n\n    @HostListener(\"keyup\", [\"$event\"])\n    handleKeyup(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n\n    @HostListener(\"paste\", [\"$event\"])\n    handlePaste(event: any) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n\n    isChromeAndroid(): boolean {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n\n    registerOnChange(callbackFunction: Function): void {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n\n    registerOnTouched(callbackFunction: Function): void {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n\n    setDisabledState(value: boolean): void {\n        this.elementRef.nativeElement.disabled = value;\n    }\n\n    validate(abstractControl: AbstractControl): { [key: string]: any } {\n        let result: any = {};\n\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n\n        return result != {} ? result : null;\n    }\n\n    writeValue(value: number): void {\n        this.inputHandler.setValue(value);\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { CurrencyMaskDirective } from \"./currency-mask.directive\";\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    declarations: [CurrencyMaskDirective],\n    exports: [CurrencyMaskDirective],\n})\nexport class CurrencyMaskModule {}\n","/*\n * Public API Surface of ng2-currency-mask\n */\n\nexport * from \"./lib/currency-mask.config\";\nexport * from \"./lib/currency-mask.directive\";\nexport * from \"./lib/currency-mask.module\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}