{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers() {\n    let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.getSelection().anchorNode;\n\n      if (range && range.firstChild == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n\n  set rawValue(value) {\n    this._storedRawValue = value;\n\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n\n  get storedRawValue() {\n    return this._storedRawValue;\n  }\n\n}\n\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n\n  addNumber(keyCode) {\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, \"0\");\n    }\n\n    let keyChar = String.fromCharCode(keyCode);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart + 1);\n  }\n\n  applyMask(isNumber, rawValue) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n    if (!onlyNumbers) {\n      return \"\";\n    }\n\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n    if (precision > 0) {\n      decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n      newRawValue += decimal + decimalPart;\n    }\n\n    let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n    let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n\n  clearMask(rawValue) {\n    if (rawValue == null || rawValue == \"\") {\n      return null;\n    }\n\n    let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n\n    return parseFloat(value);\n  }\n\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      let selectionStart = this.inputSelection.selectionStart;\n      this.rawValue = \"-\" + this.rawValue;\n      this.updateFieldValue(selectionStart + 1);\n    }\n  }\n\n  changeToPositive() {\n    let selectionStart = this.inputSelection.selectionStart;\n    this.rawValue = this.rawValue.replace(\"-\", \"\");\n    this.updateFieldValue(selectionStart - 1);\n  }\n\n  fixCursorPosition(forceToEndPosition) {\n    let currentCursorPosition = this.inputSelection.selectionStart; //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n\n    if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition()); //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n    } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n    }\n  }\n\n  getRawValueWithoutSuffixEndPosition() {\n    return this.rawValue.length - this.options.suffix.length;\n  }\n\n  getRawValueWithoutPrefixStartPosition() {\n    return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n  }\n\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands\n    } = this.options;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n\n    if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n      selectionEnd = this.rawValue.length - this.options.suffix.length;\n      selectionStart = this.rawValue.length - this.options.suffix.length;\n    } //there is no selection\n\n\n    if (selectionEnd == selectionStart) {\n      //delete key and the target digit is a number\n      if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n        selectionEnd = selectionEnd + 1;\n      } //delete key and the target digit is the decimal or thousands divider\n\n\n      if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n        selectionEnd = selectionEnd + 2;\n        selectionStart = selectionStart + 1;\n      } //backspace key and the target digit is a number\n\n\n      if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n        selectionStart = selectionStart - 1;\n      } //backspace key and the target digit is the decimal or thousands divider\n\n\n      if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n        selectionStart = selectionStart - 2;\n        selectionEnd = selectionEnd - 1;\n      }\n    }\n\n    this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart);\n  }\n\n  updateFieldValue(selectionStart) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\");\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n\n}\n\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  handleClick(event, chromeAndroid) {\n    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart); //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n\n    if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n      this.inputService.fixCursorPosition(chromeAndroid);\n    }\n  }\n\n  handleCut(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n\n  handleInput(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n    let rawValueLength = this.inputService.rawValue.length;\n    let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n    this.inputService.rawValue = this.inputService.storedRawValue;\n\n    if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n      this.setCursorPosition(event);\n      return;\n    }\n\n    if (rawValueLength < storedRawValueLength) {\n      if (this.inputService.value != 0) {\n        this.inputService.removeNumber(8);\n      } else {\n        this.setValue(null);\n      }\n    }\n\n    if (rawValueLength > storedRawValueLength) {\n      switch (keyCode) {\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n\n        default:\n          if (!this.inputService.canInputMoreNumbers || isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null) {\n            return;\n          }\n\n          this.inputService.addNumber(keyCode);\n      }\n    }\n\n    this.setCursorPosition(event);\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeydown(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n      if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n        this.setValue(null);\n        this.onModelChange(this.inputService.value);\n      }\n\n      if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n\n      if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n\n  handleKeypress(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n      return;\n    }\n\n    switch (keyCode) {\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n\n      default:\n        if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n          this.inputService.addNumber(keyCode);\n        }\n\n    }\n\n    event.preventDefault();\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeyup(event) {\n    this.inputService.fixCursorPosition();\n  }\n\n  handlePaste(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n\n  setValue(value) {\n    this.inputService.value = value;\n  }\n\n  getNewKeyCode(oldString, newString) {\n    if (oldString.length > newString.length) {\n      return null;\n    }\n\n    for (let x = 0; x < newString.length; x++) {\n      if (oldString.length == x || oldString[x] != newString[x]) {\n        return newString.charCodeAt(x);\n      }\n    }\n\n    return null;\n  }\n\n  isArrowEndHomeKeyInFirefox(event) {\n    if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isReadOnly() {\n    return this.htmlInputElement && this.htmlInputElement.readOnly;\n  }\n\n  setCursorPosition(event) {\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition(); // For some reason, in Android, the event got override before the timeout and change the target.\n\n    const inputElement = event.target;\n    setTimeout(function () {\n      inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n    }, 0);\n  }\n\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\n\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\"\n    };\n\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n\n  handleClick(event) {\n    this.inputHandler.handleClick(event, this.isChromeAndroid());\n  }\n\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleCut(event);\n    }\n  }\n\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      this.inputHandler.handleInput(event);\n    }\n  }\n\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeydown(event);\n    }\n  }\n\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeypress(event);\n    }\n  }\n\n  handleKeyup(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeyup(event);\n    }\n  }\n\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handlePaste(event);\n    }\n  }\n\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n\n  validate(abstractControl) {\n    let result = {};\n\n    if (abstractControl.value > this.max) {\n      result.max = true;\n    }\n\n    if (abstractControl.value < this.min) {\n      result.min = true;\n    }\n\n    return result != {} ? result : null;\n  }\n\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n\n}\n\nCurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(i0.ɵɵdirectiveInject(CURRENCY_MASK_CONFIG, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\n\nCurrencyMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) {\n        return ctx.handleClick($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyup($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      });\n    }\n  },\n  inputs: {\n    max: \"max\",\n    min: \"min\",\n    options: \"options\"\n  },\n  features: [i0.ɵɵProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n    provide: NG_VALIDATORS,\n    useExisting: CurrencyMaskDirective,\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n        provide: NG_VALIDATORS,\n        useExisting: CurrencyMaskDirective,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.KeyValueDiffers\n    }];\n  }, {\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handleKeyup: [{\n      type: HostListener,\n      args: [\"keyup\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }]\n  });\n})();\n\nclass CurrencyMaskModule {}\n\nCurrencyMaskModule.ɵfac = function CurrencyMaskModule_Factory(t) {\n  return new (t || CurrencyMaskModule)();\n};\n\nCurrencyMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CurrencyMaskModule\n});\nCurrencyMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };","map":{"version":3,"sources":["C:/LEX3/Recente/site-pessoal-angular/node_modules/ng2-currency-mask/fesm2020/ng2-currency-mask.mjs"],"names":["i0","InjectionToken","forwardRef","Directive","Optional","Inject","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","CommonModule","CURRENCY_MASK_CONFIG","InputManager","constructor","htmlInputElement","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","storedRawValue","InputService","options","inputManager","addNumber","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","allowNegative","decimal","precision","prefix","suffix","thousands","Number","toFixed","onlyNumbers","integerPart","decimalPart","repeat","isZero","parseInt","operator","indexOf","clearMask","RegExp","parseFloat","changeToNegative","charAt","changeToPositive","fixCursorPosition","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","removeNumber","test","undefined","updateOptions","InputHandler","inputService","handleClick","event","chromeAndroid","selectionRangeLength","Math","abs","isNaN","handleCut","isReadOnly","setTimeout","setValue","onModelChange","handleInput","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","handleKeydown","which","charCode","preventDefault","handleKeypress","isArrowEndHomeKeyInFirefox","handleKeyup","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","oldString","newString","x","charCodeAt","readOnly","inputElement","target","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","Object","assign","ngOnInit","handleBlur","apply","isChromeAndroid","navigator","userAgent","registerOnChange","registerOnTouched","setDisabledState","disabled","validate","abstractControl","result","max","min","writeValue","ɵfac","ElementRef","KeyValueDiffers","ɵdir","type","args","selector","providers","decorators","CurrencyMaskModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n        let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.getSelection().anchorNode;\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue;\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n    applyMask(isNumber, rawValue) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n        if (!onlyNumbers) {\n            return \"\";\n        }\n        let integerPart = onlyNumbers\n            .slice(0, onlyNumbers.length - precision)\n            .replace(/^0*/g, \"\")\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    clearMask(rawValue) {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n    changeToPositive() {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n    fixCursorPosition(forceToEndPosition) {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        }\n        else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n    getRawValueWithoutSuffixEndPosition() {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n    getRawValueWithoutPrefixStartPosition() {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) &&\n                (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 &&\n                (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n    updateFieldValue(selectionStart) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n    handleClick(event, chromeAndroid) {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n    handleCut(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeydown(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    handleKeypress(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeyup(event) {\n        this.inputService.fixCursorPosition();\n    }\n    handlePaste(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    getNewKeyCode(oldString, newString) {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n        return null;\n    }\n    isArrowEndHomeKeyInFirefox(event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    }\n    isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n    setCursorPosition(event) {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        // For some reason, in Android, the event got override before the timeout and change the target.\n        const inputElement = event.target;\n        setTimeout(function () {\n            inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\",\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleClick(event) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n    handleKeyup(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    validate(abstractControl) {\n        let result = {};\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n        return result != {} ? result : null;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, deps: [{ token: CURRENCY_MASK_CONFIG, optional: true }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCurrencyMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: CurrencyMaskDirective, selector: \"[currencyMask]\", inputs: { max: \"max\", min: \"min\", options: \"options\" }, host: { listeners: { \"blur\": \"handleBlur($event)\", \"click\": \"handleClick($event)\", \"cut\": \"handleCut($event)\", \"input\": \"handleInput($event)\", \"keydown\": \"handleKeydown($event)\", \"keypress\": \"handleKeypress($event)\", \"keyup\": \"handleKeyup($event)\", \"paste\": \"handlePaste($event)\" } }, providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[currencyMask]\",\n                    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CURRENCY_MASK_CONFIG]\n                }] }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }]; }, propDecorators: { max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], handleBlur: [{\n                type: HostListener,\n                args: [\"blur\", [\"$event\"]]\n            }], handleClick: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], handleCut: [{\n                type: HostListener,\n                args: [\"cut\", [\"$event\"]]\n            }], handleInput: [{\n                type: HostListener,\n                args: [\"input\", [\"$event\"]]\n            }], handleKeydown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }], handleKeypress: [{\n                type: HostListener,\n                args: [\"keypress\", [\"$event\"]]\n            }], handleKeyup: [{\n                type: HostListener,\n                args: [\"keyup\", [\"$event\"]]\n            }], handlePaste: [{\n                type: HostListener,\n                args: [\"paste\", [\"$event\"]]\n            }] } });\n\nclass CurrencyMaskModule {\n}\nCurrencyMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCurrencyMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, declarations: [CurrencyMaskDirective], imports: [CommonModule, FormsModule], exports: [CurrencyMaskDirective] });\nCurrencyMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule],\n                    declarations: [CurrencyMaskDirective],\n                    exports: [CurrencyMaskDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n"]},"metadata":{},"sourceType":"module"}